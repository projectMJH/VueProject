{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nconst TYPE_REQUEST = \"q\";\nconst TYPE_RESPONSE = \"s\";\nconst DEFAULT_TIMEOUT = 6e4;\nfunction defaultSerialize(i) {\n  return i;\n}\nconst defaultDeserialize = defaultSerialize;\nconst {\n  clearTimeout,\n  setTimeout\n} = globalThis;\nconst random = Math.random.bind(Math);\nfunction createBirpc(functions, options) {\n  const {\n    post,\n    on,\n    off = () => {},\n    eventNames = [],\n    serialize = defaultSerialize,\n    deserialize = defaultDeserialize,\n    resolver,\n    bind = \"rpc\",\n    timeout = DEFAULT_TIMEOUT\n  } = options;\n  const rpcPromiseMap = /* @__PURE__ */new Map();\n  let _promise;\n  let closed = false;\n  const rpc = new Proxy({}, {\n    get(_, method) {\n      if (method === \"$functions\") return functions;\n      if (method === \"$close\") return close;\n      if (method === \"then\" && !eventNames.includes(\"then\") && !(\"then\" in functions)) return void 0;\n      const sendEvent = (...args) => {\n        post(serialize({\n          m: method,\n          a: args,\n          t: TYPE_REQUEST\n        }));\n      };\n      if (eventNames.includes(method)) {\n        sendEvent.asEvent = sendEvent;\n        return sendEvent;\n      }\n      const sendCall = async (...args) => {\n        if (closed) throw new Error(`[birpc] rpc is closed, cannot call \"${method}\"`);\n        if (_promise) {\n          try {\n            await _promise;\n          } finally {\n            _promise = void 0;\n          }\n        }\n        return new Promise((resolve, reject) => {\n          const id = nanoid();\n          let timeoutId;\n          if (timeout >= 0) {\n            timeoutId = setTimeout(() => {\n              try {\n                const handleResult = options.onTimeoutError?.(method, args);\n                if (handleResult !== true) throw new Error(`[birpc] timeout on calling \"${method}\"`);\n              } catch (e) {\n                reject(e);\n              }\n              rpcPromiseMap.delete(id);\n            }, timeout);\n            if (typeof timeoutId === \"object\") timeoutId = timeoutId.unref?.();\n          }\n          rpcPromiseMap.set(id, {\n            resolve,\n            reject,\n            timeoutId,\n            method\n          });\n          post(serialize({\n            m: method,\n            a: args,\n            i: id,\n            t: \"q\"\n          }));\n        });\n      };\n      sendCall.asEvent = sendEvent;\n      return sendCall;\n    }\n  });\n  function close(error) {\n    closed = true;\n    rpcPromiseMap.forEach(({\n      reject,\n      method\n    }) => {\n      reject(error || new Error(`[birpc] rpc is closed, cannot call \"${method}\"`));\n    });\n    rpcPromiseMap.clear();\n    off(onMessage);\n  }\n  async function onMessage(data, ...extra) {\n    let msg;\n    try {\n      msg = deserialize(data);\n    } catch (e) {\n      if (options.onGeneralError?.(e) !== true) throw e;\n      return;\n    }\n    if (msg.t === TYPE_REQUEST) {\n      const {\n        m: method,\n        a: args\n      } = msg;\n      let result, error;\n      const fn = resolver ? resolver(method, functions[method]) : functions[method];\n      if (!fn) {\n        error = new Error(`[birpc] function \"${method}\" not found`);\n      } else {\n        try {\n          result = await fn.apply(bind === \"rpc\" ? rpc : functions, args);\n        } catch (e) {\n          error = e;\n        }\n      }\n      if (msg.i) {\n        if (error && options.onError) options.onError(error, method, args);\n        if (error && options.onFunctionError) {\n          if (options.onFunctionError(error, method, args) === true) return;\n        }\n        if (!error) {\n          try {\n            post(serialize({\n              t: TYPE_RESPONSE,\n              i: msg.i,\n              r: result\n            }), ...extra);\n            return;\n          } catch (e) {\n            error = e;\n            if (options.onGeneralError?.(e, method, args) !== true) throw e;\n          }\n        }\n        try {\n          post(serialize({\n            t: TYPE_RESPONSE,\n            i: msg.i,\n            e: error\n          }), ...extra);\n        } catch (e) {\n          if (options.onGeneralError?.(e, method, args) !== true) throw e;\n        }\n      }\n    } else {\n      const {\n        i: ack,\n        r: result,\n        e: error\n      } = msg;\n      const promise = rpcPromiseMap.get(ack);\n      if (promise) {\n        clearTimeout(promise.timeoutId);\n        if (error) promise.reject(error);else promise.resolve(result);\n      }\n      rpcPromiseMap.delete(ack);\n    }\n  }\n  _promise = on(onMessage);\n  return rpc;\n}\nconst cacheMap = /* @__PURE__ */new WeakMap();\nfunction cachedMap(items, fn) {\n  return items.map(i => {\n    let r = cacheMap.get(i);\n    if (!r) {\n      r = fn(i);\n      cacheMap.set(i, r);\n    }\n    return r;\n  });\n}\nfunction createBirpcGroup(functions, channels, options = {}) {\n  const getChannels = () => typeof channels === \"function\" ? channels() : channels;\n  const getClients = (channels2 = getChannels()) => cachedMap(channels2, s => createBirpc(functions, {\n    ...options,\n    ...s\n  }));\n  const broadcastProxy = new Proxy({}, {\n    get(_, method) {\n      const client = getClients();\n      const callbacks = client.map(c => c[method]);\n      const sendCall = (...args) => {\n        return Promise.all(callbacks.map(i => i(...args)));\n      };\n      sendCall.asEvent = (...args) => {\n        callbacks.map(i => i.asEvent(...args));\n      };\n      return sendCall;\n    }\n  });\n  function updateChannels(fn) {\n    const channels2 = getChannels();\n    fn?.(channels2);\n    return getClients(channels2);\n  }\n  getClients();\n  return {\n    get clients() {\n      return getClients();\n    },\n    functions,\n    updateChannels,\n    broadcast: broadcastProxy,\n    /**\n     * @deprecated use `broadcast`\n     */\n    // @ts-expect-error deprecated\n    boardcast: broadcastProxy\n  };\n}\nconst urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nfunction nanoid(size = 21) {\n  let id = \"\";\n  let i = size;\n  while (i--) id += urlAlphabet[random() * 64 | 0];\n  return id;\n}\nexport { DEFAULT_TIMEOUT, cachedMap, createBirpc, createBirpcGroup };","map":{"version":3,"names":["TYPE_REQUEST","TYPE_RESPONSE","DEFAULT_TIMEOUT","defaultSerialize","i","defaultDeserialize","clearTimeout","setTimeout","globalThis","random","Math","bind","createBirpc","functions","options","post","on","off","eventNames","serialize","deserialize","resolver","timeout","rpcPromiseMap","Map","_promise","closed","rpc","Proxy","get","_","method","close","includes","sendEvent","args","m","a","t","asEvent","sendCall","Error","Promise","resolve","reject","id","nanoid","timeoutId","handleResult","onTimeoutError","e","delete","unref","set","error","forEach","clear","onMessage","data","extra","msg","onGeneralError","result","fn","apply","onError","onFunctionError","r","ack","promise","cacheMap","WeakMap","cachedMap","items","map","createBirpcGroup","channels","getChannels","getClients","channels2","s","broadcastProxy","client","callbacks","c","all","updateChannels","clients","broadcast","boardcast","urlAlphabet","size"],"sources":["C:/vuejs/vuex_food_project/node_modules/birpc/dist/index.mjs"],"sourcesContent":["const TYPE_REQUEST = \"q\";\nconst TYPE_RESPONSE = \"s\";\nconst DEFAULT_TIMEOUT = 6e4;\nfunction defaultSerialize(i) {\n  return i;\n}\nconst defaultDeserialize = defaultSerialize;\nconst { clearTimeout, setTimeout } = globalThis;\nconst random = Math.random.bind(Math);\nfunction createBirpc(functions, options) {\n  const {\n    post,\n    on,\n    off = () => {\n    },\n    eventNames = [],\n    serialize = defaultSerialize,\n    deserialize = defaultDeserialize,\n    resolver,\n    bind = \"rpc\",\n    timeout = DEFAULT_TIMEOUT\n  } = options;\n  const rpcPromiseMap = /* @__PURE__ */ new Map();\n  let _promise;\n  let closed = false;\n  const rpc = new Proxy({}, {\n    get(_, method) {\n      if (method === \"$functions\")\n        return functions;\n      if (method === \"$close\")\n        return close;\n      if (method === \"then\" && !eventNames.includes(\"then\") && !(\"then\" in functions))\n        return void 0;\n      const sendEvent = (...args) => {\n        post(serialize({ m: method, a: args, t: TYPE_REQUEST }));\n      };\n      if (eventNames.includes(method)) {\n        sendEvent.asEvent = sendEvent;\n        return sendEvent;\n      }\n      const sendCall = async (...args) => {\n        if (closed)\n          throw new Error(`[birpc] rpc is closed, cannot call \"${method}\"`);\n        if (_promise) {\n          try {\n            await _promise;\n          } finally {\n            _promise = void 0;\n          }\n        }\n        return new Promise((resolve, reject) => {\n          const id = nanoid();\n          let timeoutId;\n          if (timeout >= 0) {\n            timeoutId = setTimeout(() => {\n              try {\n                const handleResult = options.onTimeoutError?.(method, args);\n                if (handleResult !== true)\n                  throw new Error(`[birpc] timeout on calling \"${method}\"`);\n              } catch (e) {\n                reject(e);\n              }\n              rpcPromiseMap.delete(id);\n            }, timeout);\n            if (typeof timeoutId === \"object\")\n              timeoutId = timeoutId.unref?.();\n          }\n          rpcPromiseMap.set(id, { resolve, reject, timeoutId, method });\n          post(serialize({ m: method, a: args, i: id, t: \"q\" }));\n        });\n      };\n      sendCall.asEvent = sendEvent;\n      return sendCall;\n    }\n  });\n  function close(error) {\n    closed = true;\n    rpcPromiseMap.forEach(({ reject, method }) => {\n      reject(error || new Error(`[birpc] rpc is closed, cannot call \"${method}\"`));\n    });\n    rpcPromiseMap.clear();\n    off(onMessage);\n  }\n  async function onMessage(data, ...extra) {\n    let msg;\n    try {\n      msg = deserialize(data);\n    } catch (e) {\n      if (options.onGeneralError?.(e) !== true)\n        throw e;\n      return;\n    }\n    if (msg.t === TYPE_REQUEST) {\n      const { m: method, a: args } = msg;\n      let result, error;\n      const fn = resolver ? resolver(method, functions[method]) : functions[method];\n      if (!fn) {\n        error = new Error(`[birpc] function \"${method}\" not found`);\n      } else {\n        try {\n          result = await fn.apply(bind === \"rpc\" ? rpc : functions, args);\n        } catch (e) {\n          error = e;\n        }\n      }\n      if (msg.i) {\n        if (error && options.onError)\n          options.onError(error, method, args);\n        if (error && options.onFunctionError) {\n          if (options.onFunctionError(error, method, args) === true)\n            return;\n        }\n        if (!error) {\n          try {\n            post(serialize({ t: TYPE_RESPONSE, i: msg.i, r: result }), ...extra);\n            return;\n          } catch (e) {\n            error = e;\n            if (options.onGeneralError?.(e, method, args) !== true)\n              throw e;\n          }\n        }\n        try {\n          post(serialize({ t: TYPE_RESPONSE, i: msg.i, e: error }), ...extra);\n        } catch (e) {\n          if (options.onGeneralError?.(e, method, args) !== true)\n            throw e;\n        }\n      }\n    } else {\n      const { i: ack, r: result, e: error } = msg;\n      const promise = rpcPromiseMap.get(ack);\n      if (promise) {\n        clearTimeout(promise.timeoutId);\n        if (error)\n          promise.reject(error);\n        else\n          promise.resolve(result);\n      }\n      rpcPromiseMap.delete(ack);\n    }\n  }\n  _promise = on(onMessage);\n  return rpc;\n}\nconst cacheMap = /* @__PURE__ */ new WeakMap();\nfunction cachedMap(items, fn) {\n  return items.map((i) => {\n    let r = cacheMap.get(i);\n    if (!r) {\n      r = fn(i);\n      cacheMap.set(i, r);\n    }\n    return r;\n  });\n}\nfunction createBirpcGroup(functions, channels, options = {}) {\n  const getChannels = () => typeof channels === \"function\" ? channels() : channels;\n  const getClients = (channels2 = getChannels()) => cachedMap(channels2, (s) => createBirpc(functions, { ...options, ...s }));\n  const broadcastProxy = new Proxy({}, {\n    get(_, method) {\n      const client = getClients();\n      const callbacks = client.map((c) => c[method]);\n      const sendCall = (...args) => {\n        return Promise.all(callbacks.map((i) => i(...args)));\n      };\n      sendCall.asEvent = (...args) => {\n        callbacks.map((i) => i.asEvent(...args));\n      };\n      return sendCall;\n    }\n  });\n  function updateChannels(fn) {\n    const channels2 = getChannels();\n    fn?.(channels2);\n    return getClients(channels2);\n  }\n  getClients();\n  return {\n    get clients() {\n      return getClients();\n    },\n    functions,\n    updateChannels,\n    broadcast: broadcastProxy,\n    /**\n     * @deprecated use `broadcast`\n     */\n    // @ts-expect-error deprecated\n    boardcast: broadcastProxy\n  };\n}\nconst urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nfunction nanoid(size = 21) {\n  let id = \"\";\n  let i = size;\n  while (i--)\n    id += urlAlphabet[random() * 64 | 0];\n  return id;\n}\n\nexport { DEFAULT_TIMEOUT, cachedMap, createBirpc, createBirpcGroup };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}